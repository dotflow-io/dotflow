{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to dotflow This is a very simple library that is still in the early stages of development. The main goal of this tool is to create a simple and secure workflow for executing any type of task. The library's API design was made to make it easy to add tasks and control their execution. To keep it simple, just instantiate the DotFlow class, use the add method, and the start method to begin execution. Start with the basics here . Getting Help We use GitHub issues for tracking bugs and feature requests and have limited bandwidth to address them. If you need anything, I ask you to please follow our templates for opening issues or discussions. \ud83d\udc1b Bug Report \ud83d\udcd5 Documentation Issue \ud83d\ude80 Feature Request \ud83d\udcac General Question Commit Style \u2699\ufe0f FEATURE \ud83d\udcdd PEP8 \ud83d\udccc ISSUE \ud83e\udeb2 BUG \ud83d\udcd8 DOCS \ud83d\udce6 PyPI \u2764\ufe0f\ufe0f TEST \u2b06\ufe0f CI/CD \u26a0\ufe0f SECURITY License This project is licensed under the terms of the MIT License.","title":"Home"},{"location":"#welcome-to-dotflow","text":"This is a very simple library that is still in the early stages of development. The main goal of this tool is to create a simple and secure workflow for executing any type of task. The library's API design was made to make it easy to add tasks and control their execution. To keep it simple, just instantiate the DotFlow class, use the add method, and the start method to begin execution. Start with the basics here .","title":"Welcome to dotflow"},{"location":"#getting-help","text":"We use GitHub issues for tracking bugs and feature requests and have limited bandwidth to address them. If you need anything, I ask you to please follow our templates for opening issues or discussions. \ud83d\udc1b Bug Report \ud83d\udcd5 Documentation Issue \ud83d\ude80 Feature Request \ud83d\udcac General Question","title":"Getting Help"},{"location":"#commit-style","text":"\u2699\ufe0f FEATURE \ud83d\udcdd PEP8 \ud83d\udccc ISSUE \ud83e\udeb2 BUG \ud83d\udcd8 DOCS \ud83d\udce6 PyPI \u2764\ufe0f\ufe0f TEST \u2b06\ufe0f CI/CD \u26a0\ufe0f SECURITY","title":"Commit Style"},{"location":"#license","text":"This project is licensed under the terms of the MIT License.","title":"License"},{"location":"nav/getting-started/","text":"Getting Started February 10, 2025 Install To install Dotflow, run the following command from the command line: With Pip pip install dotflow With Poetry poetry add dotflow First Steps The simplest file could look like this: from dotflow import DotFlow, action def my_callback(*args, **kwargs): print(args, kwargs) @action(retry=5) def my_task(): print(\"task\") workflow = DotFlow() workflow.task.add(step=my_task, callback=my_callback) workflow.start() 1 - Import Start with the basics, which is importing the necessary classes and methods. ( DotFlow , action ) from dotflow import DotFlow, action 2 - Callback function Create a my_callback function to receive execution information of a task. It is not necessary to include this function, as you will still have a report at the end of the execution in the instantiated object of the DotFlow class. This my_callback function is only needed if you need to do something after the execution of the task, for example: sending a message to someone, making a phone call, or sending a letter. def my_callback(*args, **kwargs): print(args, kwargs) 3 - Task function Now, create the function responsible for executing your task. It's very simple; just use the action decorator above the function, and that's it\u2014you've created a task. If necessary, you can also add the parameter called retry to set the maximum number of execution attempts if the function fails. @action(retry=5) def my_task(): print(\"task\") 4 - DotFlow Class Instantiate the DotFlow class in a workflow variable to be used in the following steps. More details . workflow = DotFlow() 5 - Add Task Now, simply add the my_task and my_callback functions you created earlier to the workflow using the code below. This process is necessary to define which tasks will be executed and the order in which they will run. The execution order follows the sequence in which they were added to the workflow. workflow.task.add(step=my_task, callback=my_callback) 6 - Start Finally, just execute the workflow with the following code snippet. workflow.start()","title":"Getting Started"},{"location":"nav/getting-started/#getting-started","text":"February 10, 2025","title":"Getting Started"},{"location":"nav/getting-started/#install","text":"To install Dotflow, run the following command from the command line:","title":"Install"},{"location":"nav/getting-started/#with-pip","text":"pip install dotflow","title":"With Pip"},{"location":"nav/getting-started/#with-poetry","text":"poetry add dotflow","title":"With Poetry"},{"location":"nav/getting-started/#first-steps","text":"The simplest file could look like this: from dotflow import DotFlow, action def my_callback(*args, **kwargs): print(args, kwargs) @action(retry=5) def my_task(): print(\"task\") workflow = DotFlow() workflow.task.add(step=my_task, callback=my_callback) workflow.start()","title":"First Steps"},{"location":"nav/getting-started/#1-import","text":"Start with the basics, which is importing the necessary classes and methods. ( DotFlow , action ) from dotflow import DotFlow, action","title":"1 - Import"},{"location":"nav/getting-started/#2-callback-function","text":"Create a my_callback function to receive execution information of a task. It is not necessary to include this function, as you will still have a report at the end of the execution in the instantiated object of the DotFlow class. This my_callback function is only needed if you need to do something after the execution of the task, for example: sending a message to someone, making a phone call, or sending a letter. def my_callback(*args, **kwargs): print(args, kwargs)","title":"2 - Callback function"},{"location":"nav/getting-started/#3-task-function","text":"Now, create the function responsible for executing your task. It's very simple; just use the action decorator above the function, and that's it\u2014you've created a task. If necessary, you can also add the parameter called retry to set the maximum number of execution attempts if the function fails. @action(retry=5) def my_task(): print(\"task\")","title":"3 - Task function"},{"location":"nav/getting-started/#4-dotflow-class","text":"Instantiate the DotFlow class in a workflow variable to be used in the following steps. More details . workflow = DotFlow()","title":"4 - DotFlow Class"},{"location":"nav/getting-started/#5-add-task","text":"Now, simply add the my_task and my_callback functions you created earlier to the workflow using the code below. This process is necessary to define which tasks will be executed and the order in which they will run. The execution order follows the sequence in which they were added to the workflow. workflow.task.add(step=my_task, callback=my_callback)","title":"5 - Add Task"},{"location":"nav/getting-started/#6-start","text":"Finally, just execute the workflow with the following code snippet. workflow.start()","title":"6 - Start"},{"location":"nav/development/development-guide/","text":"Development Guide Getting Help We use GitHub issues for tracking bugs and feature requests and have limited bandwidth to address them. If you need anything, I ask you to please follow our templates for opening issues or discussions. \ud83d\udc1b Bug Report \ud83d\udcd5 Documentation Issue \ud83d\ude80 Feature Request \ud83d\udcac General Question Commit Style \u2699\ufe0f FEATURE \ud83d\udcdd PEP8 \ud83d\udccc ISSUE \ud83e\udeb2 BUG \ud83d\udcd8 DOCS \ud83d\udce6 PyPI \u2764\ufe0f\ufe0f TEST \u2b06\ufe0f CI/CD \u26a0\ufe0f SECURITY","title":"Development Guide"},{"location":"nav/development/development-guide/#development-guide","text":"","title":"Development Guide"},{"location":"nav/development/development-guide/#getting-help","text":"We use GitHub issues for tracking bugs and feature requests and have limited bandwidth to address them. If you need anything, I ask you to please follow our templates for opening issues or discussions. \ud83d\udc1b Bug Report \ud83d\udcd5 Documentation Issue \ud83d\ude80 Feature Request \ud83d\udcac General Question","title":"Getting Help"},{"location":"nav/development/development-guide/#commit-style","text":"\u2699\ufe0f FEATURE \ud83d\udcdd PEP8 \ud83d\udccc ISSUE \ud83e\udeb2 BUG \ud83d\udcd8 DOCS \ud83d\udce6 PyPI \u2764\ufe0f\ufe0f TEST \u2b06\ufe0f CI/CD \u26a0\ufe0f SECURITY","title":"Commit Style"},{"location":"nav/development/release-notes/","text":"Release Notes v0.9.0 \ud83d\udce6 PyPI - Build 0.9.0 \ud83d\udccc Bulk task inclusion option v0.8.2 \ud83d\udce6 PyPI - Build 0.8.2 \ud83e\udeb2 Fixed class-type step without init v0.8.1 \ud83d\udce6 PyPI - Build 0.8.1 \ud83e\udeb2 Fixed context switching v0.8.0 \ud83d\udce6 PyPI - Build 0.8.0 \ud83d\udccc Create CLI to manage workflow v0.7.0 \ud83d\udce6 PyPI - Build 0.7.0 \ud83d\udccc Communication layer implementation v0.6.0 \ud83d\udce6 PyPI - Build 0.6.0 v0.5.0 \ud83d\udce6 PyPI - Build 0.5.1 \ud83d\udccc CLI - Command-Line Interface \ud83d\udccc Step adaptation with class structure v0.4.1 \ud83d\udce6 PyPI - Build 0.4.1 v0.4.0 \ud83d\udce6 PyPI - Build 0.4.0 \ud83d\udccc Improvement of the API to start the workflow task \ud83d\udccc Improved API interface for decorators \ud83d\udccc Improvement unit tests v0.3.0 \ud83d\udce6 PyPI - Build 0.3.0 \ud83d\udccc Improvement of the API to start the workflow task v0.2.0 \ud83d\udce6 PyPI - Build 0.2.0 \ud83d\udccc Create documentation \ud83d\udccc Import of the context class v0.1.0 \ud83d\udce6 PyPI - Build 0.1.0","title":"Release Notes"},{"location":"nav/development/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"nav/development/release-notes/#v090","text":"\ud83d\udce6 PyPI - Build 0.9.0 \ud83d\udccc Bulk task inclusion option","title":"v0.9.0"},{"location":"nav/development/release-notes/#v082","text":"\ud83d\udce6 PyPI - Build 0.8.2 \ud83e\udeb2 Fixed class-type step without init","title":"v0.8.2"},{"location":"nav/development/release-notes/#v081","text":"\ud83d\udce6 PyPI - Build 0.8.1 \ud83e\udeb2 Fixed context switching","title":"v0.8.1"},{"location":"nav/development/release-notes/#v080","text":"\ud83d\udce6 PyPI - Build 0.8.0 \ud83d\udccc Create CLI to manage workflow","title":"v0.8.0"},{"location":"nav/development/release-notes/#v070","text":"\ud83d\udce6 PyPI - Build 0.7.0 \ud83d\udccc Communication layer implementation","title":"v0.7.0"},{"location":"nav/development/release-notes/#v060","text":"\ud83d\udce6 PyPI - Build 0.6.0","title":"v0.6.0"},{"location":"nav/development/release-notes/#v050","text":"\ud83d\udce6 PyPI - Build 0.5.1 \ud83d\udccc CLI - Command-Line Interface \ud83d\udccc Step adaptation with class structure","title":"v0.5.0"},{"location":"nav/development/release-notes/#v041","text":"\ud83d\udce6 PyPI - Build 0.4.1","title":"v0.4.1"},{"location":"nav/development/release-notes/#v040","text":"\ud83d\udce6 PyPI - Build 0.4.0 \ud83d\udccc Improvement of the API to start the workflow task \ud83d\udccc Improved API interface for decorators \ud83d\udccc Improvement unit tests","title":"v0.4.0"},{"location":"nav/development/release-notes/#v030","text":"\ud83d\udce6 PyPI - Build 0.3.0 \ud83d\udccc Improvement of the API to start the workflow task","title":"v0.3.0"},{"location":"nav/development/release-notes/#v020","text":"\ud83d\udce6 PyPI - Build 0.2.0 \ud83d\udccc Create documentation \ud83d\udccc Import of the context class","title":"v0.2.0"},{"location":"nav/development/release-notes/#v010","text":"\ud83d\udce6 PyPI - Build 0.1.0","title":"v0.1.0"},{"location":"nav/reference/action-decorator/","text":"Action decorator Here's the reference information for the action decorator. Import You can import the action decorator directly from dotflow: from dotflow import action Examples Standard class dotflow.action @action def my_task(): print(\"task\") With Retry class dotflow.action @action(retry=5) def my_task(): print(\"task\") Parameters PARAMETER DESCRIPTION retry Integer-type parameter referring to the number of retry attempts the function will execute in case of failure.","title":"Action decorator"},{"location":"nav/reference/action-decorator/#action-decorator","text":"Here's the reference information for the action decorator.","title":"Action decorator"},{"location":"nav/reference/action-decorator/#import","text":"You can import the action decorator directly from dotflow: from dotflow import action","title":"Import"},{"location":"nav/reference/action-decorator/#examples","text":"","title":"Examples"},{"location":"nav/reference/action-decorator/#standard","text":"class dotflow.action @action def my_task(): print(\"task\")","title":"Standard"},{"location":"nav/reference/action-decorator/#with-retry","text":"class dotflow.action @action(retry=5) def my_task(): print(\"task\")","title":"With Retry"},{"location":"nav/reference/action-decorator/#parameters","text":"PARAMETER DESCRIPTION retry Integer-type parameter referring to the number of retry attempts the function will execute in case of failure.","title":"Parameters"},{"location":"nav/reference/add-function/","text":"Add Function Here's the reference information for the add function. Example class dotflow.DotFlow.task.add workflow.task.add(step=my_task, callback=my_callback) Parameters Function DESCRIPTION * step A parameter that receives an object of the callable type, which is basically a function. You can see in this example . TYPE : Callable DEFAULT : _____ initial_context The parameter exists to include initial data in the execution of the workflow within the function context . This parameter can be accessed internally, for example: initial_context , to retrieve this information and manipulate it if necessary, according to the objective of the workflow. TYPE : Any DEFAULT : Context callback Any callable object that receives args or kwargs , which is basically a function. You can see in this example . TYPE : Callable DEFAULT : _____","title":"Add Function"},{"location":"nav/reference/add-function/#add-function","text":"Here's the reference information for the add function.","title":"Add Function"},{"location":"nav/reference/add-function/#example","text":"class dotflow.DotFlow.task.add workflow.task.add(step=my_task, callback=my_callback)","title":"Example"},{"location":"nav/reference/add-function/#parameters","text":"Function DESCRIPTION * step A parameter that receives an object of the callable type, which is basically a function. You can see in this example . TYPE : Callable DEFAULT : _____ initial_context The parameter exists to include initial data in the execution of the workflow within the function context . This parameter can be accessed internally, for example: initial_context , to retrieve this information and manipulate it if necessary, according to the objective of the workflow. TYPE : Any DEFAULT : Context callback Any callable object that receives args or kwargs , which is basically a function. You can see in this example . TYPE : Callable DEFAULT : _____","title":"Parameters"},{"location":"nav/reference/context-class/","text":"Context class Here's the reference information for the Context class, with all its parameters, attributes and functions. Import You can import the Context class directly from dotflow: from dotflow import Context Example class dotflow.Context Context( storage={\"data\": [0, 1, 2, 3]} ) Parameters PARAMETER DESCRIPTION storage Attribute where any type of Python object can be stored. TYPE : Any DEFAULT : None time Attribute available only for access; sending this parameter is not allowed. It will be assigned a value at runtime with the current date and time. TYPE : datetime DEFAULT : datetime.now","title":"Context class"},{"location":"nav/reference/context-class/#context-class","text":"Here's the reference information for the Context class, with all its parameters, attributes and functions.","title":"Context class"},{"location":"nav/reference/context-class/#import","text":"You can import the Context class directly from dotflow: from dotflow import Context","title":"Import"},{"location":"nav/reference/context-class/#example","text":"class dotflow.Context Context( storage={\"data\": [0, 1, 2, 3]} )","title":"Example"},{"location":"nav/reference/context-class/#parameters","text":"PARAMETER DESCRIPTION storage Attribute where any type of Python object can be stored. TYPE : Any DEFAULT : None time Attribute available only for access; sending this parameter is not allowed. It will be assigned a value at runtime with the current date and time. TYPE : datetime DEFAULT : datetime.now","title":"Parameters"},{"location":"nav/reference/dotflow-class/","text":"Dotflow class Here's the reference information for the DotFlow class, with all its parameters, attributes and functions. Import You can import the Dotflow class directly from dotflow: from dotflow import DotFlow Example class dotflow.DotFlow workflow = DotFlow()","title":"Dotflow class"},{"location":"nav/reference/dotflow-class/#dotflow-class","text":"Here's the reference information for the DotFlow class, with all its parameters, attributes and functions.","title":"Dotflow class"},{"location":"nav/reference/dotflow-class/#import","text":"You can import the Dotflow class directly from dotflow: from dotflow import DotFlow","title":"Import"},{"location":"nav/reference/dotflow-class/#example","text":"class dotflow.DotFlow workflow = DotFlow()","title":"Example"},{"location":"nav/reference/start-function/","text":"Start Function Here's the reference information for the start function. Example class dotflow.DotFlow.start workflow.start() Parameters PARAMETER DESCRIPTION keep_going A parameter that receives a boolean object with the purpose of continuing or not the execution of the workflow in case of an error during the execution of a task. If it is true , the execution will continue; if it is False , the workflow will stop. TYPE : bool DEFAULT : false mode A parameter for assigning the execution mode of the workflow. Currently, there is the option to execute in sequential mode or background mode. By default, it is in sequential mode. TYPE : str DEFAULT : \"sequential\"","title":"Start Function"},{"location":"nav/reference/start-function/#start-function","text":"Here's the reference information for the start function.","title":"Start Function"},{"location":"nav/reference/start-function/#example","text":"class dotflow.DotFlow.start workflow.start()","title":"Example"},{"location":"nav/reference/start-function/#parameters","text":"PARAMETER DESCRIPTION keep_going A parameter that receives a boolean object with the purpose of continuing or not the execution of the workflow in case of an error during the execution of a task. If it is true , the execution will continue; if it is False , the workflow will stop. TYPE : bool DEFAULT : false mode A parameter for assigning the execution mode of the workflow. Currently, there is the option to execute in sequential mode or background mode. By default, it is in sequential mode. TYPE : str DEFAULT : \"sequential\"","title":"Parameters"}]}